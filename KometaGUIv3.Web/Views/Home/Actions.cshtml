@model dynamic
@{
    ViewData["Title"] = "Final Actions";
    Layout = "_Layout";
}

<div class="container">
    <div class="page-header">
        <h1>Final Actions</h1>
        <p>Generate configuration, run Kometa, and manage your setup</p>
    </div>

    <div class="actions-container">
        <div class="actions-grid">
            <!-- Configuration Generation -->
            <div class="action-card">
                <div class="card-header">
                    <h3>üìÑ Configuration</h3>
                </div>
                <div class="card-content">
                    <p>Generate and manage your Kometa YAML configuration files</p>
                    <div class="button-group">
                        <button class="btn btn-primary" onclick="generateConfig()">
                            Generate Config YAML
                        </button>
                        <button class="btn btn-secondary" onclick="previewConfig()">
                            Preview Config
                        </button>
                        <button class="btn btn-secondary" onclick="downloadConfig()">
                            Download Config
                        </button>
                    </div>
                    <div class="config-status" id="config-status">
                        <span class="status-text">Ready to generate configuration</span>
                    </div>
                </div>
            </div>

            <!-- Kometa Execution -->
            <div class="action-card">
                <div class="card-header">
                    <h3>üöÄ Run Kometa</h3>
                </div>
                <div class="card-content">
                    <p>Execute Kometa with your current configuration</p>
                    <div class="button-group">
                        <button class="btn btn-success" id="run-kometa-btn" onclick="runKometa()">
                            Run Kometa
                        </button>
                        <button class="btn btn-danger" id="stop-kometa-btn" onclick="stopKometa()" disabled>
                            Stop Kometa
                        </button>
                        <button class="btn btn-secondary" onclick="testKometa()">
                            Test Run (Dry Run)
                        </button>
                    </div>
                    <div class="execution-status" id="execution-status">
                        <span class="status-text">Ready to run</span>
                    </div>
                </div>
            </div>

            <!-- Task Scheduling -->
            <div class="action-card">
                <div class="card-header">
                    <h3>‚è∞ Scheduling</h3>
                </div>
                <div class="card-content">
                    <p>Create Windows scheduled tasks for automated runs</p>
                    <div class="schedule-config">
                        <div class="form-group">
                            <label>Frequency:</label>
                            <select id="schedule-frequency">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Interval:</label>
                            <input type="number" id="schedule-interval" min="1" max="30" value="1" />
                        </div>
                        <div class="form-group">
                            <label>Time:</label>
                            <input type="time" id="schedule-time" value="02:00" />
                        </div>
                    </div>
                    <div class="button-group">
                        <button class="btn btn-primary" onclick="createScheduledTask()">
                            Create Scheduled Task
                        </button>
                        <button class="btn btn-danger" onclick="removeScheduledTask()">
                            Remove Scheduled Task
                        </button>
                    </div>
                    <div class="schedule-status" id="schedule-status">
                        <span class="status-text">No scheduled task configured</span>
                    </div>
                </div>
            </div>

            <!-- Localhost Server -->
            <div class="action-card">
                <div class="card-header">
                    <h3>üåê Localhost Server</h3>
                </div>
                <div class="card-content">
                    <p>Manage the web interface server (localhost:6969)</p>
                    <div class="server-info">
                        <div class="info-row">
                            <span>Status:</span>
                            <span class="server-status" id="server-status">Running</span>
                        </div>
                        <div class="info-row">
                            <span>URL:</span>
                            <a href="http://localhost:6969" target="_blank" class="server-url">http://localhost:6969</a>
                        </div>
                        <div class="info-row">
                            <span>Port:</span>
                            <span>6969</span>
                        </div>
                    </div>
                    <div class="button-group">
                        <button class="btn btn-success" id="start-server-btn" onclick="startServer()" disabled>
                            Start Server
                        </button>
                        <button class="btn btn-danger" id="stop-server-btn" onclick="stopServer()">
                            Stop Server
                        </button>
                        <button class="btn btn-secondary" onclick="restartServer()">
                            Restart Server
                        </button>
                    </div>
                </div>
            </div>

            <!-- Support & Donations -->
            <div class="action-card">
                <div class="card-header">
                    <h3>‚ù§Ô∏è Support</h3>
                </div>
                <div class="card-content">
                    <p>Support the development of Kometa and this GUI</p>
                    <div class="button-group">
                        <button class="btn btn-warning" onclick="openPayPal()">
                            üí∞ Donate via PayPal
                        </button>
                        <button class="btn btn-secondary" onclick="openGitHub()">
                            ‚≠ê Star on GitHub
                        </button>
                        <button class="btn btn-secondary" onclick="openDocs()">
                            üìö View Documentation
                        </button>
                    </div>
                </div>
            </div>

            <!-- System Information -->
            <div class="action-card">
                <div class="card-header">
                    <h3>‚ÑπÔ∏è System Info</h3>
                </div>
                <div class="card-content">
                    <div class="system-info">
                        <div class="info-row">
                            <span>Kometa GUI Version:</span>
                            <span>v3.0.0</span>
                        </div>
                        <div class="info-row">
                            <span>Profile:</span>
                            <span id="current-profile">Default</span>
                        </div>
                        <div class="info-row">
                            <span>Kometa Directory:</span>
                            <span id="kometa-directory">Not configured</span>
                        </div>
                        <div class="info-row">
                            <span>Config Status:</span>
                            <span class="config-complete-status" id="config-complete-status">Incomplete</span>
                        </div>
                    </div>
                    <div class="button-group">
                        <button class="btn btn-secondary" onclick="checkSystemRequirements()">
                            Check System Requirements
                        </button>
                        <button class="btn btn-secondary" onclick="openConfigDirectory()">
                            Open Config Directory
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Log Area -->
        <div class="log-section">
            <div class="log-header">
                <h3>üìã Execution Log</h3>
                <div class="log-controls">
                    <button class="btn btn-small" onclick="clearLog()">Clear</button>
                    <button class="btn btn-small" onclick="saveLog()">Save</button>
                    <label>
                        <input type="checkbox" id="auto-scroll" checked />
                        <span>Auto-scroll</span>
                    </label>
                </div>
            </div>
            <div class="log-container" id="log-container">
                <div class="log-content" id="log-content">
                    <div class="log-entry system">
                        <span class="timestamp">[${new Date().toLocaleTimeString()}]</span>
                        <span class="message">Kometa GUI v3 ready. Welcome!</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.actions-container {
    background: var(--bg-secondary);
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.action-card {
    background: var(--bg-tertiary);
    border: 2px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.2s ease;
}

.action-card:hover {
    border-color: var(--accent-primary);
}

.card-header {
    background: var(--bg-quaternary);
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border-color);
}

.card-header h3 {
    margin: 0;
    color: var(--text-primary);
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.card-content {
    padding: 1.5rem;
}

.card-content p {
    color: var(--text-secondary);
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
}

.button-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.button-group .btn {
    flex: 1;
    min-width: 120px;
    text-align: center;
}

.status-text, .config-complete-status {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.config-complete-status.complete {
    color: var(--success-color);
}

.config-complete-status.incomplete {
    color: var(--warning-color);
}

.schedule-config {
    margin-bottom: 1rem;
}

.schedule-config .form-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.schedule-config label {
    color: var(--text-primary);
    font-size: 0.9rem;
}

.schedule-config input, .schedule-config select {
    width: 120px;
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: var(--bg-primary);
    color: var(--text-primary);
}

.server-info, .system-info {
    margin-bottom: 1rem;
}

.info-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--border-color);
    font-size: 0.9rem;
}

.info-row:last-child {
    border-bottom: none;
}

.info-row span:first-child {
    color: var(--text-secondary);
}

.info-row span:last-child {
    color: var(--text-primary);
}

.server-status.running {
    color: var(--success-color);
}

.server-status.stopped {
    color: var(--error-color);
}

.server-url {
    color: var(--accent-primary);
    text-decoration: none;
}

.server-url:hover {
    text-decoration: underline;
}

.log-section {
    background: var(--bg-tertiary);
    border-radius: 8px;
    overflow: hidden;
    height: 400px;
    display: flex;
    flex-direction: column;
}

.log-header {
    background: var(--bg-quaternary);
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.log-header h3 {
    margin: 0;
    color: var(--text-primary);
    font-size: 1.1rem;
}

.log-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.log-controls label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-primary);
    font-size: 0.8rem;
}

.btn-small {
    padding: 0.25rem 0.75rem !important;
    font-size: 0.8rem !important;
}

.log-container {
    flex: 1;
    overflow-y: auto;
    background: var(--bg-primary);
}

.log-content {
    padding: 1rem;
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    font-size: 0.8rem;
    line-height: 1.4;
}

.log-entry {
    display: flex;
    margin-bottom: 0.25rem;
    word-wrap: break-word;
}

.log-entry .timestamp {
    color: var(--text-tertiary);
    margin-right: 0.5rem;
    white-space: nowrap;
}

.log-entry .message {
    color: var(--text-primary);
    flex: 1;
}

.log-entry.error .message {
    color: var(--error-color);
}

.log-entry.warning .message {
    color: var(--warning-color);
}

.log-entry.success .message {
    color: var(--success-color);
}

.log-entry.system .message {
    color: var(--accent-primary);
}

@@media (max-width: 768px) {
    .actions-grid {
        grid-template-columns: 1fr;
    }
    
    .button-group {
        flex-direction: column;
    }
    
    .button-group .btn {
        min-width: auto;
    }
    
    .log-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }
    
    .info-row {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }
    
    .schedule-config .form-group {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
}
</style>

<script>
let isKometaRunning = false;
let isServerRunning = true; // Since we're already on the server
let logEntries = [];

document.addEventListener('DOMContentLoaded', function() {
    initializeActionsPage();
    updateSystemInfo();
    
    // Connect to SignalR for real-time updates
    if (window.connection) {
        setupSignalRHandlers();
    }
});

function initializeActionsPage() {
    // Load current profile and configuration status
    const currentProfile = localStorage.getItem('currentProfile') || 'Default';
    document.getElementById('current-profile').textContent = currentProfile;
    
    // Check configuration completeness
    checkConfigurationStatus();
    
    // Initialize log auto-scroll
    const autoScrollCheckbox = document.getElementById('auto-scroll');
    autoScrollCheckbox.addEventListener('change', function() {
        if (this.checked) {
            scrollLogToBottom();
        }
    });
}

function setupSignalRHandlers() {
    // Listen for Kometa execution updates
    window.connection.on('KometaLogReceived', function(message) {
        addLogEntry('info', message);
    });
    
    window.connection.on('KometaExecutionStarted', function() {
        isKometaRunning = true;
        updateKometaButtons();
        addLogEntry('system', 'Kometa execution started');
        updateExecutionStatus('Running...', 'running');
    });
    
    window.connection.on('KometaExecutionCompleted', function(success) {
        isKometaRunning = false;
        updateKometaButtons();
        const message = success ? 'Kometa execution completed successfully' : 'Kometa execution failed';
        const type = success ? 'success' : 'error';
        addLogEntry(type, message);
        updateExecutionStatus(success ? 'Completed successfully' : 'Execution failed', success ? 'success' : 'error');
    });
    
    // Listen for configuration updates
    window.connection.on('ConfigurationGenerated', function(success) {
        const message = success ? 'Configuration YAML generated successfully' : 'Failed to generate configuration';
        const type = success ? 'success' : 'error';
        addLogEntry(type, message);
        updateConfigStatus(message, success ? 'success' : 'error');
    });
    
    // Listen for scheduled task updates
    window.connection.on('ScheduledTaskUpdated', function(created, taskName) {
        const message = created ? `Scheduled task "${taskName}" created` : `Scheduled task "${taskName}" removed`;
        addLogEntry('system', message);
        updateScheduleStatus(message);
    });
}

function checkConfigurationStatus() {
    // Check if all required configurations are present
    const connectionData = JSON.parse(localStorage.getItem('connectionData') || '{}');
    const chartsData = JSON.parse(localStorage.getItem('selectedCharts') || '[]');
    const servicesData = JSON.parse(localStorage.getItem('servicesConfiguration') || '{}');
    
    const hasKometaDirectory = connectionData.kometaDirectory;
    const hasPlexAuth = connectionData.plexToken && connectionData.plexServerUrl;
    const hasTmdbKey = connectionData.tmdbApiKey;
    
    const isComplete = hasKometaDirectory && hasPlexAuth && hasTmdbKey;
    
    const statusElement = document.getElementById('config-complete-status');
    statusElement.textContent = isComplete ? 'Complete' : 'Incomplete';
    statusElement.className = 'config-complete-status ' + (isComplete ? 'complete' : 'incomplete');
    
    // Update Kometa directory display
    if (hasKometaDirectory) {
        document.getElementById('kometa-directory').textContent = connectionData.kometaDirectory;
    }
}

function updateSystemInfo() {
    // This would typically get real system information
    // For now, use static/stored data
    checkConfigurationStatus();
}

function generateConfig() {
    addLogEntry('system', 'Generating configuration YAML...');
    updateConfigStatus('Generating...', 'info');
    
    // Gather all configuration data
    const configData = {
        connection: JSON.parse(localStorage.getItem('connectionData') || '{}'),
        charts: JSON.parse(localStorage.getItem('selectedCharts') || '[]'),
        overlays: JSON.parse(localStorage.getItem('overlayConfiguration') || '{}'),
        services: JSON.parse(localStorage.getItem('servicesConfiguration') || '{}'),
        settings: JSON.parse(localStorage.getItem('settingsConfiguration') || '{}')
    };
    
    // Simulate config generation (in real implementation, this would call the backend)
    setTimeout(() => {
        if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
            window.connection.invoke('GenerateConfiguration', configData);
        } else {
            // Fallback for when SignalR is not available
            addLogEntry('success', 'Configuration YAML generated successfully (client-side)');
            updateConfigStatus('Generated successfully', 'success');
        }
    }, 1000);
}

function previewConfig() {
    addLogEntry('system', 'Opening configuration preview...');
    
    // This would show a modal or new window with the YAML preview
    const previewWindow = window.open('', '_blank', 'width=800,height=600');
    previewWindow.document.write(`
        <html>
            <head>
                <title>Configuration Preview</title>
                <style>
                    body { font-family: monospace; padding: 20px; background: #1a1a1a; color: #fff; }
                    pre { white-space: pre-wrap; word-wrap: break-word; background: #2a2a2a; padding: 20px; border-radius: 8px; }
                </style>
            </head>
            <body>
                <h2>Kometa Configuration Preview</h2>
                <pre># Generated by Kometa GUI v3
# Profile: ${localStorage.getItem('currentProfile') || 'Default'}
# Generated: ${new Date().toLocaleString()}

libraries:
  Movies:
    collection_files:
      - default: basic
      - default: imdb
    overlay_files:
      - default: resolution
      - default: audio_codec

  TV Shows:
    collection_files:
      - default: network
    overlay_files:
      - default: resolution
      - default: audio_codec

settings:
  cache: true
  cache_expiration: 60
  asset_directory: config/assets
  sync_mode: sync
  run_order:
    - operations
    - metadata
    - collections
    - overlays

# Additional configuration would be generated here based on your selections...
</pre>
                <button onclick="window.close()" style="margin-top: 20px; padding: 10px 20px; background: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer;">Close</button>
            </body>
        </html>
    `);
}

function downloadConfig() {
    addLogEntry('system', 'Preparing configuration download...');
    
    // Generate YAML content (simplified)
    const yamlContent = generateYamlContent();
    
    // Create and trigger download
    const blob = new Blob([yamlContent], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'config.yml';
    link.click();
    URL.revokeObjectURL(url);
    
    addLogEntry('success', 'Configuration downloaded successfully');
}

function generateYamlContent() {
    const connectionData = JSON.parse(localStorage.getItem('connectionData') || '{}');
    
    return `# Kometa Configuration
# Generated by Kometa GUI v3
# Profile: ${localStorage.getItem('currentProfile') || 'Default'}
# Generated: ${new Date().toISOString()}

libraries:
  Movies:
    collection_files:
      - default: basic
      - default: imdb
    overlay_files:
      - default: resolution

  TV Shows:
    collection_files:
      - default: network
    overlay_files:
      - default: resolution

plex:
  url: ${connectionData.plexServerUrl || 'http://localhost:32400'}
  token: ${connectionData.plexToken || 'YOUR_PLEX_TOKEN'}

tmdb:
  apikey: ${connectionData.tmdbApiKey || 'YOUR_TMDB_API_KEY'}

settings:
  cache: true
  cache_expiration: 60
  asset_directory: config/assets
  sync_mode: sync
  run_order:
    - operations
    - metadata
    - collections
    - overlays
`;
}

function runKometa() {
    if (isKometaRunning) {
        addLogEntry('warning', 'Kometa is already running');
        return;
    }
    
    addLogEntry('system', 'Starting Kometa execution...');
    isKometaRunning = true;
    updateKometaButtons();
    updateExecutionStatus('Starting...', 'info');
    
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        const currentProfile = localStorage.getItem('currentProfile') || 'Default';
        window.connection.invoke('RunKometa', currentProfile);
    } else {
        // Fallback simulation
        simulateKometaExecution();
    }
}

function stopKometa() {
    if (!isKometaRunning) {
        addLogEntry('warning', 'Kometa is not currently running');
        return;
    }
    
    addLogEntry('system', 'Stopping Kometa execution...');
    
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        window.connection.invoke('StopKometa');
    } else {
        // Fallback
        isKometaRunning = false;
        updateKometaButtons();
        addLogEntry('system', 'Kometa execution stopped');
        updateExecutionStatus('Stopped by user', 'warning');
    }
}

function testKometa() {
    addLogEntry('system', 'Starting Kometa test run (dry run)...');
    
    // Simulate a test run
    setTimeout(() => {
        addLogEntry('info', 'Test run completed - no changes made to your library');
        addLogEntry('success', 'Configuration appears to be valid');
    }, 2000);
}

function simulateKometaExecution() {
    const messages = [
        'Connecting to Plex server...',
        'Authenticating with Plex...',
        'Loading library: Movies',
        'Processing collections...',
        'Applying overlays...',
        'Loading library: TV Shows',
        'Processing collections...',
        'Applying overlays...',
        'Execution completed successfully'
    ];
    
    let index = 0;
    const interval = setInterval(() => {
        if (index < messages.length - 1) {
            addLogEntry('info', messages[index]);
        } else {
            addLogEntry('success', messages[index]);
            isKometaRunning = false;
            updateKometaButtons();
            updateExecutionStatus('Completed successfully', 'success');
            clearInterval(interval);
        }
        index++;
    }, 1000);
}

function createScheduledTask() {
    const frequency = document.getElementById('schedule-frequency').value;
    const interval = document.getElementById('schedule-interval').value;
    const time = document.getElementById('schedule-time').value;
    
    addLogEntry('system', `Creating scheduled task: ${frequency} every ${interval} interval(s) at ${time}`);
    
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        const currentProfile = localStorage.getItem('currentProfile') || 'Default';
        window.connection.invoke('CreateScheduledTask', currentProfile, frequency, parseInt(interval), time);
    } else {
        // Fallback simulation
        setTimeout(() => {
            addLogEntry('success', 'Scheduled task created successfully');
            updateScheduleStatus(`Scheduled: ${frequency} at ${time}`);
        }, 1000);
    }
}

function removeScheduledTask() {
    addLogEntry('system', 'Removing scheduled task...');
    
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        const currentProfile = localStorage.getItem('currentProfile') || 'Default';
        window.connection.invoke('RemoveScheduledTask', currentProfile);
    } else {
        // Fallback simulation
        setTimeout(() => {
            addLogEntry('success', 'Scheduled task removed successfully');
            updateScheduleStatus('No scheduled task configured');
        }, 1000);
    }
}

function startServer() {
    // This is called from within the server, so it's already running
    addLogEntry('info', 'Server is already running');
}

function stopServer() {
    if (confirm('Are you sure you want to stop the localhost server? This will close the web interface.')) {
        addLogEntry('system', 'Stopping localhost server...');
        
        if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
            window.connection.invoke('StopServer');
        }
        
        // Show message before server shuts down
        setTimeout(() => {
            alert('Server is shutting down. This page will become unavailable.');
        }, 1000);
    }
}

function restartServer() {
    if (confirm('Are you sure you want to restart the localhost server? The page will reload.')) {
        addLogEntry('system', 'Restarting localhost server...');
        
        if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
            window.connection.invoke('RestartServer');
        }
        
        // Reload page after restart
        setTimeout(() => {
            window.location.reload();
        }, 3000);
    }
}

function openPayPal() {
    addLogEntry('system', 'Opening PayPal donation page...');
    window.open('https://paypal.com', '_blank');
}

function openGitHub() {
    addLogEntry('system', 'Opening GitHub repository...');
    window.open('https://github.com/Kometa-Team/Kometa', '_blank');
}

function openDocs() {
    addLogEntry('system', 'Opening documentation...');
    window.open('https://kometa.wiki', '_blank');
}

function checkSystemRequirements() {
    addLogEntry('system', 'Checking system requirements...');
    
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        window.connection.invoke('CheckSystemRequirements');
    } else {
        // Fallback simulation
        setTimeout(() => {
            addLogEntry('success', '‚úì Python 3.8+ installed');
            addLogEntry('success', '‚úì Git installed');
            addLogEntry('success', '‚úì Internet connection available');
            addLogEntry('info', 'System requirements check completed');
        }, 1500);
    }
}

function openConfigDirectory() {
    addLogEntry('system', 'Opening configuration directory...');
    
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        window.connection.invoke('OpenConfigDirectory');
    }
}

function updateKometaButtons() {
    const runBtn = document.getElementById('run-kometa-btn');
    const stopBtn = document.getElementById('stop-kometa-btn');
    
    runBtn.disabled = isKometaRunning;
    stopBtn.disabled = !isKometaRunning;
    
    if (isKometaRunning) {
        runBtn.textContent = 'Running...';
        runBtn.className = 'btn btn-secondary';
    } else {
        runBtn.textContent = 'Run Kometa';
        runBtn.className = 'btn btn-success';
    }
}

function updateConfigStatus(message, type) {
    const statusElement = document.getElementById('config-status').querySelector('.status-text');
    statusElement.textContent = message;
    statusElement.className = 'status-text ' + (type || '');
}

function updateExecutionStatus(message, type) {
    const statusElement = document.getElementById('execution-status').querySelector('.status-text');
    statusElement.textContent = message;
    statusElement.className = 'status-text ' + (type || '');
}

function updateScheduleStatus(message) {
    const statusElement = document.getElementById('schedule-status').querySelector('.status-text');
    statusElement.textContent = message;
}

function addLogEntry(type, message) {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = {
        timestamp: timestamp,
        type: type,
        message: message
    };
    
    logEntries.push(logEntry);
    
    const logContent = document.getElementById('log-content');
    const entryElement = document.createElement('div');
    entryElement.className = `log-entry ${type}`;
    entryElement.innerHTML = `
        <span class="timestamp">[${timestamp}]</span>
        <span class="message">${message}</span>
    `;
    
    logContent.appendChild(entryElement);
    
    // Auto-scroll if enabled
    const autoScroll = document.getElementById('auto-scroll').checked;
    if (autoScroll) {
        scrollLogToBottom();
    }
    
    // Limit log entries to prevent memory issues
    if (logEntries.length > 1000) {
        logEntries = logEntries.slice(-500);
        const entries = logContent.querySelectorAll('.log-entry');
        for (let i = 0; i < entries.length - 500; i++) {
            entries[i].remove();
        }
    }
}

function scrollLogToBottom() {
    const logContainer = document.getElementById('log-container');
    logContainer.scrollTop = logContainer.scrollHeight;
}

function clearLog() {
    const logContent = document.getElementById('log-content');
    logContent.innerHTML = '';
    logEntries = [];
    addLogEntry('system', 'Log cleared');
}

function saveLog() {
    const logText = logEntries.map(entry => 
        `[${entry.timestamp}] ${entry.message}`
    ).join('\n');
    
    const blob = new Blob([logText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `kometa-log-${new Date().toISOString().split('T')[0]}.txt`;
    link.click();
    URL.revokeObjectURL(url);
    
    addLogEntry('system', 'Log saved to file');
}

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    // Welcome message
    setTimeout(() => {
        addLogEntry('system', 'All configuration pages completed - ready to generate and run!');
    }, 500);
});
</script>