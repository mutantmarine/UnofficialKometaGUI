@model KometaGUIv3.Web.Models.ConnectionsViewModel
@{
    ViewData["Title"] = "Connections";
    ViewBag.ProfileName = Model.Profile.Name;
}

<div class="page-header">
    <h1 class="page-title">Required Connections</h1>
    <p class="page-description">Configure your Kometa directory, Plex server, and TMDb API connection for profile: <strong>@Model.Profile.Name</strong></p>
</div>

<div class="grid grid-1">
    <!-- Kometa Directory -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Kometa Directory</h3>
            <p class="card-subtitle">Select the directory where Kometa is or will be installed</p>
        </div>

        <div class="form-group">
            <label class="form-label" for="kometa-directory">Directory Path</label>
            <div style="display: flex; gap: 10px; align-items: center;">
                <input type="text" 
                       class="form-input" 
                       id="kometa-directory" 
                       value="@Model.Profile.KometaDirectory"
                       placeholder="C:\path\to\Kometa" />
                <button type="button" class="btn btn-secondary" onclick="browseDirectory()">Browse</button>
            </div>
            <small style="color: var(--text-muted); margin-top: 8px; display: block;">
                <strong>Note:</strong> Directory folder must be named "Kometa" (e.g., C:\path\to\Kometa) and may be empty or contain preexisting files.
            </small>
        </div>
    </div>

    <!-- Plex Setup -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Plex Server Configuration</h3>
            <p class="card-subtitle">Connect to your Plex Media Server</p>
        </div>

        <div class="grid grid-2">
            <div class="form-group">
                <label class="form-label" for="plex-email">Plex Email</label>
                <input type="email" 
                       class="form-input" 
                       id="plex-email" 
                       value="@Model.Profile.Plex.Email"
                       placeholder="your.email@example.com" />
            </div>
            
            <div class="form-group">
                <label class="form-label" for="plex-password">Plex Password</label>
                <input type="password" 
                       class="form-input" 
                       id="plex-password" 
                       placeholder="Enter your Plex password" />
            </div>
        </div>

        <div class="form-group">
            <button type="button" class="btn btn-primary" id="authenticate-plex" onclick="authenticatePlex()">
                <span id="auth-text">Authenticate with Plex</span>
                <span id="auth-spinner" class="spinner" style="display: none;"></span>
            </button>
        </div>

        <div id="plex-results" style="display: none;">
            <div class="form-group">
                <label class="form-label" for="plex-url">Plex Server URL</label>
                <input type="text" 
                       class="form-input" 
                       id="plex-url" 
                       value="@Model.Profile.Plex.Url"
                       placeholder="http://192.168.1.100:32400" />
                <small style="color: var(--text-muted); margin-top: 5px; display: block;">
                    This URL is auto-populated but can be edited if needed.
                </small>
            </div>

            <div class="form-group">
                <label class="form-label">Available Libraries</label>
                <div id="library-selection" class="checkbox-group">
                    <!-- Libraries will be populated here -->
                </div>
                <div style="margin-top: 10px;">
                    <button type="button" class="btn btn-secondary" onclick="selectAllLibraries()">Select All</button>
                    <button type="button" class="btn btn-secondary" onclick="unselectAllLibraries()">Unselect All</button>
                </div>
            </div>

            <!-- Advanced Plex Settings (Collapsible) -->
            <div style="margin-top: 25px;">
                <button type="button" class="btn btn-secondary" onclick="toggleAdvancedSettings()">
                    <span id="advanced-toggle-text">Show Advanced Settings</span>
                </button>
            </div>

            <div id="advanced-settings" style="display: none; margin-top: 20px; padding: 20px; background: var(--bg-tertiary); border-radius: 6px;">
                <h4 style="margin-bottom: 20px; color: var(--text-primary);">Advanced Plex Settings</h4>
                <div class="grid grid-2">
                    <div class="form-group">
                        <label class="form-label" for="plex-timeout">Timeout (seconds)</label>
                        <input type="number" class="form-input" id="plex-timeout" value="@Model.Profile.Plex.Timeout" min="10" max="300" />
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="plex-db-cache">Database Cache (hours)</label>
                        <input type="number" class="form-input" id="plex-db-cache" value="@Model.Profile.Plex.DbCache" min="1" max="168" />
                    </div>
                </div>
                
                <div class="checkbox-group">
                    <div class="checkbox-item">
                        <input type="checkbox" class="checkbox" id="plex-clean-bundles" @(Model.Profile.Plex.CleanBundles ? "checked" : "") />
                        <label for="plex-clean-bundles">Clean Bundles</label>
                    </div>
                    <div class="checkbox-item">
                        <input type="checkbox" class="checkbox" id="plex-empty-trash" @(Model.Profile.Plex.EmptyTrash ? "checked" : "") />
                        <label for="plex-empty-trash">Empty Trash</label>
                    </div>
                    <div class="checkbox-item">
                        <input type="checkbox" class="checkbox" id="plex-optimize" @(Model.Profile.Plex.Optimize ? "checked" : "") />
                        <label for="plex-optimize">Optimize Database</label>
                    </div>
                    <div class="checkbox-item">
                        <input type="checkbox" class="checkbox" id="plex-verify-ssl" @(Model.Profile.Plex.VerifySSL ? "checked" : "") />
                        <label for="plex-verify-ssl">Verify SSL</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- TMDb Setup -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">TMDb API Configuration</h3>
            <p class="card-subtitle">Configure The Movie Database API access</p>
        </div>

        <div class="form-group">
            <label class="form-label" for="tmdb-api-key">TMDb API Key</label>
            <div style="display: flex; gap: 10px; align-items: center;">
                <input type="password" 
                       class="form-input" 
                       id="tmdb-api-key" 
                       value="@Model.Profile.TMDb.ApiKey"
                       placeholder="Enter your TMDb API key" />
                <button type="button" class="btn btn-secondary" onclick="validateTmdb()">Validate</button>
                <a href="https://developer.themoviedb.org/reference/intro/getting-started" 
                   target="_blank" class="btn btn-secondary">Get API Key</a>
            </div>
            <div id="tmdb-status" class="form-feedback" style="margin-top: 8px;"></div>
        </div>

        <!-- Advanced TMDb Settings -->
        <div style="margin-top: 20px;">
            <h4 style="margin-bottom: 15px; color: var(--text-primary);">Advanced TMDb Settings</h4>
            <div class="grid grid-3">
                <div class="form-group">
                    <label class="form-label" for="tmdb-cache">Cache Expiration (days)</label>
                    <input type="number" class="form-input" id="tmdb-cache" value="@Model.Profile.TMDb.CacheExpiration" min="1" max="365" />
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="tmdb-language">Language</label>
                    <select class="form-select" id="tmdb-language">
                        <option value="en" selected="@(Model.Profile.TMDb.Language == "en")">English</option>
                        <option value="es" selected="@(Model.Profile.TMDb.Language == "es")">Spanish</option>
                        <option value="fr" selected="@(Model.Profile.TMDb.Language == "fr")">French</option>
                        <option value="de" selected="@(Model.Profile.TMDb.Language == "de")">German</option>
                        <option value="it" selected="@(Model.Profile.TMDb.Language == "it")">Italian</option>
                        <option value="ja" selected="@(Model.Profile.TMDb.Language == "ja")">Japanese</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="tmdb-region">Region (optional)</label>
                    <input type="text" class="form-input" id="tmdb-region" value="@Model.Profile.TMDb.Region" placeholder="US, GB, etc." maxlength="2" />
                </div>
            </div>
        </div>
    </div>
</div>

<div class="page-nav">
    <a href="@Url.Action("ProfileManagement", "Home")" class="btn btn-secondary">← Back</a>
    <button type="button" class="btn btn-primary" id="next-btn" onclick="saveAndContinue()" disabled>
        Next: Collections →
    </button>
</div>

@section Scripts {
<script>
    let isValidating = false;
    let validationState = {
        directory: false,
        plex: false,
        tmdb: false
    };

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        loadCachedProfileData();
        validateForm();
        
        // Add event listeners for real-time validation
        document.getElementById('kometa-directory').addEventListener('input', validateDirectory);
        document.getElementById('tmdb-api-key').addEventListener('input', debounce(validateTmdb, 1000));
    });

    function validateForm() {
        const allValid = validationState.directory && validationState.plex && validationState.tmdb;
        document.getElementById('next-btn').disabled = !allValid;
        
        // Send validation status
        if (window.kometaSync) {
            kometaSync.sendConfigurationChange('validationStatus', { pageIndex: 2, isValid: allValid });
        }
    }

    function validateDirectory() {
        const directory = document.getElementById('kometa-directory').value.trim();
        const isValid = directory.length > 0 && directory.toLowerCase().includes('kometa');
        
        validationState.directory = isValid;
        validateForm();
        
        // Visual feedback
        const input = document.getElementById('kometa-directory');
        input.style.borderColor = isValid ? 'var(--success)' : 'var(--danger)';
    }

    function loadCachedProfileData() {
        // Check if profile is already authenticated
        const isAuthenticated = @(Model.Profile.Plex.IsAuthenticated.ToString().ToLower());
        const plexUrl = '@Model.Profile.Plex.Url';
        const hasLibraries = @(Model.Profile.Plex.AvailableLibraries.Count);
        
        if (isAuthenticated && plexUrl && hasLibraries > 0) {
            // Show cached authentication state
            validationState.plex = true;
            document.getElementById('plex-results').style.display = 'block';
            document.getElementById('plex-url').value = plexUrl;
            
            // Load cached libraries
            const librarySelection = document.getElementById('library-selection');
            librarySelection.innerHTML = '';
            
            @foreach (var library in Model.Profile.Plex.AvailableLibraries)
            {
                <text>
                librarySelection.innerHTML += `
                    <div class="checkbox-item">
                        <input type="checkbox" class="checkbox" id="lib-@Html.Raw(library.Name.Replace(" ", "").ToLower())" @(library.IsSelected ? "checked" : "") />
                        <label for="lib-@Html.Raw(library.Name.Replace(" ", "").ToLower())">@Html.Raw(library.Name) (@Html.Raw(library.Type))</label>
                    </div>
                `;
                </text>
            }
            
            // Update authentication button
            const authBtn = document.getElementById('authenticate-plex');
            const authText = document.getElementById('auth-text');
            authText.textContent = '✓ Previously Authenticated';
            authBtn.style.backgroundColor = 'var(--success)';
            
            // Update status message
            const statusEl = document.querySelector('label[for="plex-url"]').nextElementSibling?.nextElementSibling;
            if (statusEl) {
                statusEl.textContent = hasLibraries > 0 ? 
                    `Status: Connected with ${hasLibraries} cached libraries` : 
                    'Status: Previously authenticated - Ready to reconnect';
                statusEl.style.color = 'var(--success)';
            }
            
            validateForm();
        }
    }

    async function authenticatePlex() {
        const email = document.getElementById('plex-email').value.trim();
        const password = document.getElementById('plex-password').value;
        
        if (!email || !password) {
            alert('Please enter both email and password.');
            return;
        }

        const authBtn = document.getElementById('authenticate-plex');
        const authText = document.getElementById('auth-text');
        const authSpinner = document.getElementById('auth-spinner');
        
        // Show loading state
        authBtn.disabled = true;
        authText.style.display = 'none';
        authSpinner.style.display = 'inline-block';

        try {
            // Real Plex authentication
            const response = await fetch('/api/plex/authenticate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: email,
                    password: password,
                    profileName: '@Model.Profile.Name'
                })
            });

            if (response.ok) {
                const result = await response.json();
                
                // Authentication successful
                validationState.plex = true;
                
                // Show server URL
                document.getElementById('plex-url').value = result.serverUrl;
                
                // Show real libraries
                const librarySelection = document.getElementById('library-selection');
                librarySelection.innerHTML = '';
                
                result.libraries.forEach((library, index) => {
                    const libId = `lib-${library.name.replace(/\s+/g, '').toLowerCase()}`;
                    librarySelection.innerHTML += `
                        <div class="checkbox-item">
                            <input type="checkbox" class="checkbox" id="${libId}" />
                            <label for="${libId}">${library.name} (${library.type})</label>
                        </div>
                    `;
                });
                
                // Show results section
                document.getElementById('plex-results').style.display = 'block';
                
                // Update button
                authText.textContent = `✓ Connected to ${result.serverName}`;
                authBtn.style.backgroundColor = 'var(--success)';
                
                validateForm();
                
            } else {
                const error = await response.json();
                alert(`Authentication failed: ${error.error}`);
                validationState.plex = false;
                validateForm();
            }
            
        } catch (error) {
            alert(`Connection error: ${error.message}`);
            validationState.plex = false;
            validateForm();
        } finally {
            authSpinner.style.display = 'none';
            authText.style.display = 'inline';
            authBtn.disabled = false;
        }
    }

    async function validateTmdb() {
        const apiKey = document.getElementById('tmdb-api-key').value.trim();
        const statusEl = document.getElementById('tmdb-status');
        
        if (!apiKey) {
            statusEl.innerHTML = '';
            validationState.tmdb = false;
            validateForm();
            return;
        }

        if (isValidating) return;
        isValidating = true;

        statusEl.innerHTML = '<span style="color: var(--warning);">Validating API key...</span>';

        try {
            // Simulate TMDb API validation
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            // Mock successful validation
            validationState.tmdb = true;
            statusEl.innerHTML = '<span style="color: var(--success);">✓ Valid API key</span>';
            
            // Visual feedback
            document.getElementById('tmdb-api-key').style.borderColor = 'var(--success)';
            
        } catch (error) {
            validationState.tmdb = false;
            statusEl.innerHTML = '<span style="color: var(--danger);">✗ Invalid API key</span>';
            document.getElementById('tmdb-api-key').style.borderColor = 'var(--danger)';
        } finally {
            isValidating = false;
            validateForm();
        }
    }

    function toggleAdvancedSettings() {
        const settings = document.getElementById('advanced-settings');
        const toggleText = document.getElementById('advanced-toggle-text');
        
        if (settings.style.display === 'none') {
            settings.style.display = 'block';
            toggleText.textContent = 'Hide Advanced Settings';
        } else {
            settings.style.display = 'none';
            toggleText.textContent = 'Show Advanced Settings';
        }
    }

    function selectAllLibraries() {
        document.querySelectorAll('#library-selection .checkbox').forEach(cb => cb.checked = true);
    }

    function unselectAllLibraries() {
        document.querySelectorAll('#library-selection .checkbox').forEach(cb => cb.checked = false);
    }

    function browseDirectory() {
        // In a real implementation, this would open a directory picker
        // For now, show a mock dialog
        const path = prompt('Enter Kometa directory path:', 'C:\\path\\to\\Kometa');
        if (path) {
            document.getElementById('kometa-directory').value = path;
            validateDirectory();
        }
    }

    async function saveAndContinue() {
        if (!validationState.directory || !validationState.plex || !validationState.tmdb) {
            alert('Please complete all required fields before continuing.');
            return;
        }

        // Collect all form data
        const formData = {
            kometaDirectory: document.getElementById('kometa-directory').value,
            plex: {
                email: document.getElementById('plex-email').value,
                url: document.getElementById('plex-url').value,
                timeout: parseInt(document.getElementById('plex-timeout').value),
                dbCache: parseInt(document.getElementById('plex-db-cache').value),
                cleanBundles: document.getElementById('plex-clean-bundles').checked,
                emptyTrash: document.getElementById('plex-empty-trash').checked,
                optimize: document.getElementById('plex-optimize').checked,
                verifySSL: document.getElementById('plex-verify-ssl').checked
            },
            tmdb: {
                apiKey: document.getElementById('tmdb-api-key').value,
                cacheExpiration: parseInt(document.getElementById('tmdb-cache').value),
                language: document.getElementById('tmdb-language').value,
                region: document.getElementById('tmdb-region').value
            },
            selectedLibraries: Array.from(document.querySelectorAll('#library-selection .checkbox:checked'))
                .map(cb => cb.nextElementSibling.textContent.split(' (')[0])
        };

        // Send configuration change via SignalR
        if (window.kometaSync) {
            await kometaSync.sendConfigurationChange('connections', formData);
        }

        // Navigate to next page
        window.location.href = `@Url.Action("Collections", "Home", new { profileName = Model.Profile.Name })`;
    }

    // Utility functions
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // SignalR integration
    if (window.kometaSync) {
        kometaSync.sendPageNavigation(2); // Connections page is index 2
        
        // Handle connections changes from other clients
        kometaSync.on('connectionsChanged', (data) => {
            // Update form fields if changes come from other clients
            if (data.plex) {
                document.getElementById('plex-email').value = data.plex.email || '';
                document.getElementById('plex-url').value = data.plex.url || '';
            }
            if (data.tmdb) {
                document.getElementById('tmdb-api-key').value = data.tmdb.apiKey || '';
            }
        });
    }

    // Initialize validation on page load
    setTimeout(() => {
        validateDirectory();
        if (document.getElementById('plex-url').value) {
            validationState.plex = true;
        }
        if (document.getElementById('tmdb-api-key').value) {
            validateTmdb();
        }
    }, 500);
</script>
}