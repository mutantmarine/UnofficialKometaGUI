@model dynamic
@{
    ViewData["Title"] = "Overlays";
    Layout = "_Layout";
}

<div class="container">
    <div class="page-header">
        <h1>Overlay Configuration</h1>
        <p>Configure visual overlays for your media posters</p>
    </div>

    <div class="overlays-container">
        <!-- Media Type Selection -->
        <div class="media-type-selection">
            <h3>Media Type</h3>
            <div class="radio-group">
                <label>
                    <input type="radio" name="media-type" value="movies" checked />
                    <span>Movies</span>
                </label>
                <label>
                    <input type="radio" name="media-type" value="tvshows" />
                    <span>TV Shows</span>
                </label>
            </div>
        </div>

        <!-- Builder Level Selection (TV Shows only) -->
        <div class="builder-level-selection" id="builder-level-section" style="display: none;">
            <h3>Builder Level</h3>
            <div class="radio-group">
                <label>
                    <input type="radio" name="builder-level" value="show" checked />
                    <span>Show Level (Show Posters)</span>
                </label>
                <label>
                    <input type="radio" name="builder-level" value="season" />
                    <span>Season Level (Season Posters)</span>
                </label>
                <label>
                    <input type="radio" name="builder-level" value="episode" />
                    <span>Episode Level (Episode Thumbnails)</span>
                </label>
            </div>
        </div>

        <!-- Visual Overlay Position Map -->
        <div class="overlay-position-map">
            <h3>Overlay Positions</h3>
            <div class="position-map-container">
                <div class="poster-preview" id="poster-preview">
                    <img id="preview-image" src="/images/overlay-previews/movie_overlay_preview_1.webp" 
                         alt="Overlay Preview" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;" />
                    <div class="position-indicators" id="position-indicators">
                        <!-- Position indicators will be dynamically generated -->
                    </div>
                </div>
                <div class="position-legend" id="position-legend">
                    <!-- Legend will be dynamically generated -->
                </div>
            </div>
        </div>

        <!-- Overlay Categories -->
        <div class="overlay-categories">
            <div class="category-tabs">
                <button class="category-tab active" data-category="technical">Technical</button>
                <button class="category-tab" data-category="ratings">Ratings</button>
                <button class="category-tab" data-category="content">Content</button>
                <button class="category-tab" data-category="visual">Visual</button>
            </div>

            <!-- Technical Overlays -->
            <div class="category-panel active" id="technical-panel">
                <div class="overlay-grid" id="technical-overlays">
                    <!-- Will be populated dynamically based on media type and builder level -->
                </div>
            </div>

            <!-- Ratings Overlays -->
            <div class="category-panel" id="ratings-panel">
                <div class="overlay-grid" id="ratings-overlays">
                    <!-- Ratings overlays with advanced configuration -->
                </div>
            </div>

            <!-- Content Overlays -->
            <div class="category-panel" id="content-panel">
                <div class="overlay-grid" id="content-overlays">
                    <!-- Content-based overlays -->
                </div>
            </div>

            <!-- Visual Overlays -->
            <div class="category-panel" id="visual-panel">
                <div class="overlay-grid" id="visual-overlays">
                    <!-- Visual enhancement overlays -->
                </div>
            </div>
        </div>

        <!-- Advanced Overlay Configuration Modal -->
        <div class="overlay-modal" id="overlay-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 id="modal-title">Configure Overlay</h3>
                    <button class="modal-close" onclick="closeOverlayModal()">&times;</button>
                </div>
                <div class="modal-body" id="modal-body">
                    <!-- Dynamic content based on overlay type -->
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="closeOverlayModal()">Cancel</button>
                    <button class="btn btn-primary" onclick="saveOverlayConfig()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="page-navigation">
        <button class="btn btn-secondary" onclick="navigateToPage('charts')">Previous: Collections</button>
        <button class="btn btn-primary" onclick="navigateToPage('services')">Next: Services</button>
    </div>
</div>

<style>
.overlays-container {
    background: var(--bg-secondary);
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
}

.media-type-selection, .builder-level-selection {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: var(--bg-tertiary);
    border-radius: 6px;
}

.media-type-selection h3, .builder-level-selection h3 {
    margin: 0 0 1rem 0;
    color: var(--text-primary);
}

.radio-group {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
}

.radio-group label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-primary);
    cursor: pointer;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: 1px solid var(--border-color);
    transition: all 0.2s ease;
}

.radio-group label:hover {
    background: var(--bg-hover);
}

.radio-group input[type="radio"]:checked + span {
    color: var(--accent-primary);
    font-weight: bold;
}

.overlay-position-map {
    margin-bottom: 2rem;
}

.overlay-position-map h3 {
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.position-map-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: start;
}

.poster-preview {
    position: relative;
    width: 300px;
    height: 450px;
    background: linear-gradient(135deg, #2c3e50, #34495e);
    border-radius: 8px;
    overflow: hidden;
    margin: 0 auto;
}

.position-indicators {
    position: relative;
    width: 100%;
    height: 100%;
}

.position-indicator {
    position: absolute;
    width: 30px;
    height: 30px;
    background: var(--accent-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
    z-index: 10;
}

.position-indicator:hover {
    transform: scale(1.2);
    background: var(--accent-hover);
}

.position-indicator.occupied {
    background: var(--success-color);
}

.position-legend {
    background: var(--bg-tertiary);
    border-radius: 6px;
    padding: 1.5rem;
    max-height: 450px;
    overflow-y: auto;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--border-color);
}

.legend-number {
    width: 25px;
    height: 25px;
    background: var(--accent-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.8rem;
    font-weight: bold;
}

.legend-item.occupied .legend-number {
    background: var(--success-color);
}

.legend-text {
    color: var(--text-primary);
    font-size: 0.9rem;
}

.category-tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
}

.category-tab {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.category-tab:hover {
    background: var(--bg-hover);
    color: var(--text-primary);
}

.category-tab.active {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
}

.category-panel {
    display: none;
}

.category-panel.active {
    display: block;
}

.overlay-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
}

.overlay-item {
    background: var(--bg-tertiary);
    border: 2px solid var(--border-color);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.2s ease;
    position: relative;
}

.overlay-item:hover {
    border-color: var(--accent-primary);
    background: var(--bg-hover);
}

.overlay-item.enabled {
    border-color: var(--success-color);
    background: rgba(46, 160, 67, 0.1);
}

.overlay-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.overlay-title {
    color: var(--text-primary);
    font-size: 1.1rem;
    font-weight: bold;
    margin: 0;
}

.overlay-position {
    background: var(--accent-primary);
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
}

.overlay-description {
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin: 0 0 1rem 0;
}

.overlay-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.overlay-toggle {
    transform: scale(1.2);
}

.overlay-configure {
    background: var(--accent-primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8rem;
    transition: background-color 0.2s ease;
}

.overlay-configure:hover {
    background: var(--accent-hover);
}

.overlay-configure:disabled {
    background: var(--bg-quaternary);
    color: var(--text-disabled);
    cursor: not-allowed;
}

.overlay-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
}

.modal-content {
    background: var(--bg-secondary);
    border-radius: 8px;
    max-width: 600px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
}

.modal-header h3 {
    margin: 0;
    color: var(--text-primary);
}

.modal-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-close:hover {
    color: var(--text-primary);
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}

@@media (max-width: 768px) {
    .position-map-container {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .poster-preview {
        width: 250px;
        height: 375px;
    }
    
    .overlay-grid {
        grid-template-columns: 1fr;
    }
    
    .radio-group {
        flex-direction: column;
        gap: 1rem;
    }
    
    .category-tabs {
        flex-direction: column;
    }
}
</style>

<script>
// Overlay configuration data based on OverlayDefaults
const overlayConfigs = {
    movies: {
        technical: [
            { name: 'Resolution', position: 1, description: '4K HDR, 1080P FHD, etc.', id: 'resolution' },
            { name: 'Audio Codec', position: 2, description: 'FLAC, DTS-X, TrueHD, AAC', id: 'audio_codec' },
            { name: 'Video Format', position: 9, description: 'Remux, Blu-Ray, DVD', id: 'video_format' },
            { name: 'Language Count', position: 10, description: 'Multi-audio track indicator', id: 'language_count' }
        ],
        ratings: [
            { name: 'Ratings', position: 5, description: 'Multi-rating system with custom fonts', id: 'ratings', advanced: true }
        ],
        content: [
            { name: 'MediaStinger', position: 3, description: 'Post-credit scene indicator', id: 'mediastinger' },
            { name: 'Streaming', position: 8, description: 'Netflix, Disney+, HBO Max, etc.', id: 'streaming' },
            { name: 'US Movie Ratings', position: 8, description: 'G, PG, PG-13, R ratings', id: 'content_rating_us_movie' },
            { name: 'Australian Ratings', position: 8, description: 'Australian classification system', id: 'content_rating_au' },
            { name: 'German Ratings', position: 8, description: 'German FSK rating system', id: 'content_rating_de' },
            { name: 'UK Ratings', position: 8, description: 'BBFC classification', id: 'content_rating_uk' },
            { name: 'New Zealand Ratings', position: 8, description: 'NZ classification', id: 'content_rating_nz' }
        ],
        visual: [
            { name: 'Ribbon', position: 11, description: 'Bottom right sash with priority weighting', id: 'ribbon', priority: true }
        ]
    },
    tvshows: {
        show: {
            technical: [
                { name: 'Resolution', position: 1, description: '4K HDR, 1080P FHD, etc.', id: 'resolution' },
                { name: 'Audio Codec', position: 2, description: 'FLAC, DTS-X, TrueHD, AAC', id: 'audio_codec' },
                { name: 'Video Format', position: 8, description: 'Remux, Blu-Ray, DVD', id: 'video_format' },
                { name: 'Aspect Ratio', position: 1, description: 'Widescreen, standard ratios', id: 'aspect' },
                { name: 'Languages', position: 10, description: 'Available audio languages', id: 'languages' },
                { name: 'Language Count', position: 10, description: 'Multi-audio track indicator', id: 'language_count' },
                { name: 'Direct Play', position: 9, description: 'Direct playback capability', id: 'direct_play' }
            ],
            ratings: [
                { name: 'Ratings', position: 5, description: 'Multi-rating system with custom fonts', id: 'ratings', advanced: true }
            ],
            content: [
                { name: 'MediaStinger', position: 3, description: 'Post-credit scene indicator', id: 'mediastinger' },
                { name: 'Streaming', position: 8, description: 'Netflix, Disney+, HBO Max, etc.', id: 'streaming' },
                { name: 'Network', position: 8, description: 'Broadcasting network indicators', id: 'network' },
                { name: 'Studio', position: 8, description: 'Production studio indicators', id: 'studio' },
                { name: 'Status', position: 11, description: 'Airing, Returning, Ended, Canceled', id: 'status' },
                { name: 'Versions', position: 11, description: 'Duplicate media indicators', id: 'versions' },
                { name: 'US TV Ratings', position: 8, description: 'TV-Y, TV-G, TV-PG, TV-14, TV-MA', id: 'content_rating_us_show' },
                { name: 'Australian Ratings', position: 8, description: 'Australian classification system', id: 'content_rating_au' },
                { name: 'German Ratings', position: 8, description: 'German FSK rating system', id: 'content_rating_de' },
                { name: 'UK Ratings', position: 8, description: 'BBFC classification', id: 'content_rating_uk' },
                { name: 'New Zealand Ratings', position: 8, description: 'NZ classification', id: 'content_rating_nz' },
                { name: 'Common Sense Media', position: 8, description: 'Age-appropriate content ratings', id: 'commonsense' }
            ],
            visual: [
                { name: 'Ribbon', position: 11, description: 'Bottom right sash with priority weighting', id: 'ribbon', priority: true }
            ]
        },
        season: {
            technical: [
                { name: 'Resolution', position: 1, description: '4K HDR, 1080P FHD, etc.', id: 'resolution' },
                { name: 'Audio Codec', position: 2, description: 'FLAC, DTS-X, TrueHD, AAC', id: 'audio_codec' },
                { name: 'Video Format', position: 8, description: 'Remux, Blu-Ray, DVD', id: 'video_format' }
            ],
            ratings: [],
            content: [],
            visual: []
        },
        episode: {
            technical: [
                { name: 'Resolution', position: 1, description: '4K HDR, 1080P FHD, etc.', id: 'resolution' },
                { name: 'Audio Codec', position: 2, description: 'FLAC, DTS-X, TrueHD, AAC', id: 'audio_codec' },
                { name: 'Video Format', position: 8, description: 'Remux, Blu-Ray, DVD', id: 'video_format' }
            ],
            ratings: [
                { name: 'Ratings', position: 5, description: 'Multi-rating system with custom fonts', id: 'ratings', advanced: true }
            ],
            content: [
                { name: 'Episode Info', position: 6, description: 'S##E## episode identifiers', id: 'episode_info' },
                { name: 'Runtimes', position: 7, description: 'Episode/movie duration display', id: 'runtimes' },
                { name: 'Versions', position: 11, description: 'Duplicate media indicators', id: 'versions' }
            ],
            visual: []
        }
    }
};

// Position coordinates for overlay indicators
const positionCoords = {
    1: { top: '5%', left: '5%' },
    2: { top: '5%', right: '5%' },
    3: { top: '15%', right: '5%' },
    4: { top: '25%', left: '5%' },
    5: { top: '25%', left: '15%' },
    6: { top: '25%', left: '25%' },
    7: { top: '25%', right: '5%' },
    8: { bottom: '25%', left: '5%' },
    9: { bottom: '15%', left: '5%' },
    10: { bottom: '5%', right: '25%' },
    11: { bottom: '5%', right: '15%' },
    12: { bottom: '5%', right: '5%' },
    13: { bottom: '15%', right: '5%' }
};

let currentOverlayConfig = {};
let currentModalOverlay = null;

document.addEventListener('DOMContentLoaded', function() {
    initializeOverlayPage();
    loadSavedConfiguration();
});

function initializeOverlayPage() {
    // Media type change handler
    const mediaTypeRadios = document.querySelectorAll('input[name="media-type"]');
    mediaTypeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            updateMediaType();
            updateOverlayDisplay();
        });
    });
    
    // Builder level change handler
    const builderLevelRadios = document.querySelectorAll('input[name="builder-level"]');
    builderLevelRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            updatePreviewImage();
            updateOverlayDisplay();
        });
    });
    
    // Category tab handlers
    const categoryTabs = document.querySelectorAll('.category-tab');
    categoryTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const category = this.getAttribute('data-category');
            switchCategory(category);
        });
    });
    
    // Initial setup
    updateMediaType();
    updateOverlayDisplay();
}

function updateMediaType() {
    const selectedMediaType = document.querySelector('input[name="media-type"]:checked').value;
    const builderLevelSection = document.getElementById('builder-level-section');
    
    if (selectedMediaType === 'tvshows') {
        builderLevelSection.style.display = 'block';
    } else {
        builderLevelSection.style.display = 'none';
    }
    
    updatePreviewImage();
}

function updatePreviewImage() {
    const selectedMediaType = document.querySelector('input[name="media-type"]:checked').value;
    const selectedBuilderLevel = document.querySelector('input[name="builder-level"]:checked')?.value || 'show';
    const previewImage = document.getElementById('preview-image');
    
    let imagePath = '';
    if (selectedMediaType === 'movies') {
        imagePath = '/images/overlay-previews/movie_overlay_preview_1.webp';
    } else {
        switch (selectedBuilderLevel) {
            case 'show':
                imagePath = '/images/overlay-previews/tvshows_show_overlay_preview.webp';
                break;
            case 'season':
                imagePath = '/images/overlay-previews/tvshows_season_overlay_preview.webp';
                break;
            case 'episode':
                imagePath = '/images/overlay-previews/tvshows_episode_overlay_preview.webp';
                break;
            default:
                imagePath = '/images/overlay-previews/tvshows_show_overlay_preview.webp';
        }
    }
    
    previewImage.src = imagePath;
}

function updateOverlayDisplay() {
    const selectedMediaType = document.querySelector('input[name="media-type"]:checked').value;
    const selectedBuilderLevel = document.querySelector('input[name="builder-level"]:checked')?.value || 'show';
    
    let currentConfig;
    if (selectedMediaType === 'movies') {
        currentConfig = overlayConfigs.movies;
    } else {
        currentConfig = overlayConfigs.tvshows[selectedBuilderLevel];
    }
    
    updatePositionMap(currentConfig);
    updateOverlayCategories(currentConfig);
}

function updatePositionMap(config) {
    const positionIndicators = document.getElementById('position-indicators');
    const positionLegend = document.getElementById('position-legend');
    
    // Clear existing indicators and legend
    positionIndicators.innerHTML = '';
    positionLegend.innerHTML = '';
    
    // Get all used positions
    const usedPositions = new Set();
    Object.values(config).forEach(category => {
        category.forEach(overlay => {
            usedPositions.add(overlay.position);
        });
    });
    
    // Create position indicators
    for (let i = 1; i <= 13; i++) {
        const coords = positionCoords[i];
        if (!coords) continue;
        
        const indicator = document.createElement('div');
        indicator.className = 'position-indicator' + (usedPositions.has(i) ? ' occupied' : '');
        indicator.textContent = i;
        indicator.style.top = coords.top || 'auto';
        indicator.style.bottom = coords.bottom || 'auto';
        indicator.style.left = coords.left || 'auto';
        indicator.style.right = coords.right || 'auto';
        
        positionIndicators.appendChild(indicator);
        
        // Create legend item
        const legendItem = document.createElement('div');
        legendItem.className = 'legend-item' + (usedPositions.has(i) ? ' occupied' : '');
        legendItem.innerHTML = `
            <div class="legend-number">${i}</div>
            <div class="legend-text">${getOverlayNameForPosition(config, i) || 'Available'}</div>
        `;
        positionLegend.appendChild(legendItem);
    }
}

function getOverlayNameForPosition(config, position) {
    for (const category of Object.values(config)) {
        for (const overlay of category) {
            if (overlay.position === position) {
                return overlay.name;
            }
        }
    }
    return null;
}

function updateOverlayCategories(config) {
    Object.keys(config).forEach(categoryName => {
        const panel = document.getElementById(categoryName + '-overlays');
        if (!panel) return;
        
        panel.innerHTML = '';
        
        config[categoryName].forEach(overlay => {
            const overlayElement = createOverlayElement(overlay);
            panel.appendChild(overlayElement);
        });
    });
}

function createOverlayElement(overlay) {
    const enabled = currentOverlayConfig[overlay.name]?.enabled || false;
    
    const element = document.createElement('div');
    element.className = 'overlay-item' + (enabled ? ' enabled' : '');
    element.innerHTML = `
        <div class="overlay-header">
            <h4 class="overlay-title">${overlay.name}</h4>
            <div class="overlay-position">Position ${overlay.position}</div>
        </div>
        <p class="overlay-description">${overlay.description}</p>
        <div class="overlay-controls">
            <input type="checkbox" class="overlay-toggle" 
                   ${enabled ? 'checked' : ''} 
                   onchange="toggleOverlay('${overlay.name}', this.checked)" />
            <button class="overlay-configure" 
                    onclick="configureOverlay('${overlay.name}')"
                    ${!enabled ? 'disabled' : ''}>
                Configure
            </button>
        </div>
    `;
    
    return element;
}

function switchCategory(category) {
    // Update tab buttons
    document.querySelectorAll('.category-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[data-category="${category}"]`).classList.add('active');
    
    // Update panels
    document.querySelectorAll('.category-panel').forEach(panel => {
        panel.classList.remove('active');
    });
    document.getElementById(category + '-panel').classList.add('active');
}

function toggleOverlay(overlayName, enabled) {
    if (!currentOverlayConfig[overlayName]) {
        currentOverlayConfig[overlayName] = {};
    }
    
    currentOverlayConfig[overlayName].enabled = enabled;
    
    // Update the overlay item appearance
    const overlayElements = document.querySelectorAll('.overlay-item');
    overlayElements.forEach(element => {
        const title = element.querySelector('.overlay-title').textContent;
        if (title === overlayName) {
            element.classList.toggle('enabled', enabled);
            element.querySelector('.overlay-configure').disabled = !enabled;
        }
    });
    
    // Save configuration
    saveConfiguration();
    
    // Sync with SignalR
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        window.connection.invoke('UpdateConfiguration', 'overlays', currentOverlayConfig);
    }
}

function configureOverlay(overlayName) {
    currentModalOverlay = overlayName;
    const overlay = findOverlayByName(overlayName);
    
    document.getElementById('modal-title').textContent = `Configure ${overlayName}`;
    const modalBody = document.getElementById('modal-body');
    
    if (overlay && overlay.advanced) {
        // Advanced configuration for ratings
        modalBody.innerHTML = createAdvancedRatingConfig(overlayName);
    } else if (overlay && overlay.priority) {
        // Priority configuration for ribbons
        modalBody.innerHTML = createPriorityConfig(overlayName);
    } else {
        // Basic configuration
        modalBody.innerHTML = createBasicConfig(overlayName);
    }
    
    document.getElementById('overlay-modal').style.display = 'flex';
}

function createAdvancedRatingConfig(overlayName) {
    const config = currentOverlayConfig[overlayName] || {};
    
    return `
        <div class="config-section">
            <h4>Rating Source</h4>
            <div class="radio-group">
                <label>
                    <input type="radio" name="rating-source" value="rt_tomato" 
                           ${config.source === 'rt_tomato' ? 'checked' : ''} />
                    <span>Rotten Tomatoes</span>
                </label>
                <label>
                    <input type="radio" name="rating-source" value="imdb" 
                           ${config.source === 'imdb' ? 'checked' : ''} />
                    <span>IMDb</span>
                </label>
                <label>
                    <input type="radio" name="rating-source" value="tmdb" 
                           ${config.source === 'tmdb' ? 'checked' : ''} />
                    <span>TMDb</span>
                </label>
            </div>
        </div>
        
        <div class="config-section">
            <h4>Custom Font</h4>
            <input type="text" id="font-path" placeholder="Path to .ttf font file" 
                   value="${config.fontPath || ''}" />
            <button onclick="browseFontFile()">Browse</button>
        </div>
        
        <div class="config-section">
            <h4>Font Size</h4>
            <input type="range" id="font-size" min="50" max="100" 
                   value="${config.fontSize || 70}" />
            <span id="font-size-value">${config.fontSize || 70}</span>
        </div>
        
        <div class="config-section">
            <h4>Horizontal Position</h4>
            <div class="radio-group">
                <label>
                    <input type="radio" name="horizontal-pos" value="left" 
                           ${config.horizontalPosition !== 'right' ? 'checked' : ''} />
                    <span>Left</span>
                </label>
                <label>
                    <input type="radio" name="horizontal-pos" value="right" 
                           ${config.horizontalPosition === 'right' ? 'checked' : ''} />
                    <span>Right</span>
                </label>
            </div>
        </div>
    `;
}

function createPriorityConfig(overlayName) {
    const config = currentOverlayConfig[overlayName] || {};
    
    return `
        <div class="config-section">
            <h4>Priority Weight</h4>
            <p>Higher priority overlays will appear on top when multiple ribbons are enabled.</p>
            <input type="range" id="priority-weight" min="1" max="10" 
                   value="${config.priority || 5}" />
            <span id="priority-value">${config.priority || 5}</span>
        </div>
        
        <div class="config-section">
            <h4>Ribbon Style</h4>
            <select id="ribbon-style">
                <option value="default" ${config.style === 'default' ? 'selected' : ''}>Default</option>
                <option value="bold" ${config.style === 'bold' ? 'selected' : ''}>Bold</option>
                <option value="elegant" ${config.style === 'elegant' ? 'selected' : ''}>Elegant</option>
            </select>
        </div>
    `;
}

function createBasicConfig(overlayName) {
    const config = currentOverlayConfig[overlayName] || {};
    
    return `
        <div class="config-section">
            <h4>Basic Settings</h4>
            <div class="form-group">
                <label>Opacity:</label>
                <input type="range" id="opacity" min="0.1" max="1" step="0.1" 
                       value="${config.opacity || 1}" />
                <span id="opacity-value">${Math.round((config.opacity || 1) * 100)}%</span>
            </div>
        </div>
    `;
}

function saveOverlayConfig() {
    if (!currentModalOverlay) return;
    
    const overlay = findOverlayByName(currentModalOverlay);
    const config = currentOverlayConfig[currentModalOverlay] || {};
    
    if (overlay && overlay.advanced) {
        // Save rating configuration
        const source = document.querySelector('input[name="rating-source"]:checked')?.value;
        const fontPath = document.getElementById('font-path')?.value;
        const fontSize = document.getElementById('font-size')?.value;
        const horizontalPos = document.querySelector('input[name="horizontal-pos"]:checked')?.value;
        
        config.source = source;
        config.fontPath = fontPath;
        config.fontSize = parseInt(fontSize);
        config.horizontalPosition = horizontalPos;
    } else if (overlay && overlay.priority) {
        // Save priority configuration
        const priority = document.getElementById('priority-weight')?.value;
        const style = document.getElementById('ribbon-style')?.value;
        
        config.priority = parseInt(priority);
        config.style = style;
    } else {
        // Save basic configuration
        const opacity = document.getElementById('opacity')?.value;
        config.opacity = parseFloat(opacity);
    }
    
    currentOverlayConfig[currentModalOverlay] = config;
    saveConfiguration();
    closeOverlayModal();
    
    // Sync with SignalR
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        window.connection.invoke('UpdateConfiguration', 'overlays', currentOverlayConfig);
    }
}

function closeOverlayModal() {
    document.getElementById('overlay-modal').style.display = 'none';
    currentModalOverlay = null;
}

function browseFontFile() {
    // This would typically open a file browser dialog
    // For web implementation, you might use a file input
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.ttf,.otf';
    input.onchange = function(e) {
        if (e.target.files.length > 0) {
            document.getElementById('font-path').value = e.target.files[0].name;
        }
    };
    input.click();
}

function findOverlayByName(name) {
    const selectedMediaType = document.querySelector('input[name="media-type"]:checked').value;
    const selectedBuilderLevel = document.querySelector('input[name="builder-level"]:checked')?.value || 'show';
    
    let currentConfig;
    if (selectedMediaType === 'movies') {
        currentConfig = overlayConfigs.movies;
    } else {
        currentConfig = overlayConfigs.tvshows[selectedBuilderLevel];
    }
    
    for (const category of Object.values(currentConfig)) {
        for (const overlay of category) {
            if (overlay.name === name) {
                return overlay;
            }
        }
    }
    return null;
}

function saveConfiguration() {
    localStorage.setItem('overlayConfiguration', JSON.stringify(currentOverlayConfig));
}

function loadSavedConfiguration() {
    const saved = localStorage.getItem('overlayConfiguration');
    if (saved) {
        currentOverlayConfig = JSON.parse(saved);
    }
}

function navigateToPage(page) {
    // Sync current state before navigation
    if (window.connection && window.connection.state === signalR.HubConnectionState.Connected) {
        window.connection.invoke('PageChanged', page);
    }
    
    // Navigate to the page
    window.location.href = '/' + page;
}

// Event handlers for dynamic controls
document.addEventListener('input', function(e) {
    if (e.target.id === 'font-size') {
        document.getElementById('font-size-value').textContent = e.target.value;
    } else if (e.target.id === 'priority-weight') {
        document.getElementById('priority-value').textContent = e.target.value;
    } else if (e.target.id === 'opacity') {
        document.getElementById('opacity-value').textContent = Math.round(e.target.value * 100) + '%';
    }
});
</script>