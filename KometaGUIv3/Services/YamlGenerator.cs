using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using KometaGUIv3.Models;
using YamlDotNet.Serialization;

namespace KometaGUIv3.Services
{
    public class YamlGenerator
    {
        public string GenerateKometaConfig(KometaProfile profile)
        {
            var sb = new StringBuilder();
            
            // YAML header
            sb.AppendLine("# yaml-language-server: $schema=https://raw.githubusercontent.com/kometa-team/kometa/nightly/json-schema/config-schema.json");
            sb.AppendLine("## Generated by Kometa GUI v3");
            sb.AppendLine();

            // Plex configuration
            sb.AppendLine("plex:");
            sb.AppendLine($"  url: {profile.Plex.Url}");
            sb.AppendLine($"  token: {profile.Plex.Token}");
            sb.AppendLine("  timeout: 60");
            sb.AppendLine("  db_cache: 40");
            sb.AppendLine("  clean_bundles: false");
            sb.AppendLine("  empty_trash: false");
            sb.AppendLine("  optimize: false");
            sb.AppendLine("  verify_ssl: true");
            sb.AppendLine();

            // TMDb configuration
            sb.AppendLine("tmdb:");
            sb.AppendLine($"  apikey: {profile.TMDb.ApiKey}");
            sb.AppendLine("  cache_expiration: 60");
            sb.AppendLine("  language: en");
            sb.AppendLine("  region:");
            sb.AppendLine();

            // Libraries
            if (profile.SelectedLibraries.Count > 0)
            {
                sb.AppendLine("libraries:");
                
                foreach (var libraryName in profile.SelectedLibraries)
                {
                    sb.AppendLine($"  {libraryName}:");
                    sb.AppendLine("    remove_overlays: false");
                    
                    // Add collection files based on selected charts
                    if (profile.SelectedCharts.Count > 0)
                    {
                        sb.AppendLine("    collection_files:");
                        foreach (var chart in profile.SelectedCharts)
                        {
                            if (chart.Value) // If chart is selected
                            {
                                sb.AppendLine($"    - default: {chart.Key}");
                            }
                        }
                    }
                    
                    // Add overlay files
                    if (profile.OverlaySettings.Count > 0)
                    {
                        sb.AppendLine("    overlay_files:");
                        foreach (var overlay in profile.OverlaySettings)
                        {
                            if (overlay.Value.IsEnabled)
                            {
                                sb.AppendLine($"    - default: {overlay.Key}");
                                
                                if (overlay.Value.TemplateVariables.Count > 0 || !string.IsNullOrEmpty(overlay.Value.BuilderLevel))
                                {
                                    sb.AppendLine("      template_variables:");
                                    
                                    if (!string.IsNullOrEmpty(overlay.Value.BuilderLevel) && overlay.Value.BuilderLevel != "show")
                                    {
                                        sb.AppendLine($"        builder_level: {overlay.Value.BuilderLevel}");
                                    }
                                    
                                    foreach (var templateVar in overlay.Value.TemplateVariables)
                                    {
                                        sb.AppendLine($"        {templateVar.Key}: {templateVar.Value}");
                                    }
                                }
                            }
                        }
                    }
                    
                    sb.AppendLine("    settings:");
                    sb.AppendLine("      asset_directory:");
                    sb.AppendLine("      - config/assets");
                    sb.AppendLine();
                }
            }

            // Settings
            sb.AppendLine("settings:");
            sb.AppendLine("  run_order:");
            sb.AppendLine("  - operations");
            sb.AppendLine("  - metadata");
            sb.AppendLine("  - collections");
            sb.AppendLine("  - overlays");
            sb.AppendLine($"  cache: {profile.Settings.Cache.ToString().ToLower()}");
            sb.AppendLine($"  cache_expiration: {profile.Settings.CacheExpiration}");
            sb.AppendLine("  asset_directory:");
            sb.AppendLine("  - config/assets");
            sb.AppendLine("  asset_folders: true");
            sb.AppendLine("  asset_depth: 0");
            sb.AppendLine("  create_asset_folders: false");
            sb.AppendLine("  prioritize_assets: false");
            sb.AppendLine("  dimensional_asset_rename: false");
            sb.AppendLine("  download_url_assets: false");
            sb.AppendLine("  show_missing_season_assets: false");
            sb.AppendLine("  show_missing_episode_assets: false");
            sb.AppendLine("  show_asset_not_needed: true");
            sb.AppendLine($"  sync_mode: {profile.Settings.SyncMode}");
            sb.AppendLine($"  minimum_items: {profile.Settings.MinimumItems}");
            sb.AppendLine("  default_collection_order: release");
            sb.AppendLine($"  delete_below_minimum: {profile.Settings.DeleteBelowMinimum.ToString().ToLower()}");
            sb.AppendLine("  delete_not_scheduled: false");
            sb.AppendLine("  run_again_delay: 2");
            sb.AppendLine("  missing_only_released: false");
            sb.AppendLine("  only_filter_missing: false");
            sb.AppendLine($"  show_unmanaged: {profile.Settings.ShowUnmanaged.ToString().ToLower()}");
            sb.AppendLine("  show_unconfigured: true");
            sb.AppendLine("  show_filtered: false");
            sb.AppendLine("  show_unfiltered: false");
            sb.AppendLine("  show_options: true");
            sb.AppendLine($"  show_missing: {profile.Settings.ShowMissing.ToString().ToLower()}");
            sb.AppendLine("  show_missing_assets: true");
            sb.AppendLine("  save_report: false");
            sb.AppendLine("  tvdb_language: eng");
            sb.AppendLine("  ignore_ids:");
            sb.AppendLine("  ignore_imdb_ids:");
            sb.AppendLine("  item_refresh_delay: 0");
            sb.AppendLine("  playlist_sync_to_users:");
            sb.AppendLine("  playlist_exclude_users:");
            sb.AppendLine("  playlist_report: false");
            sb.AppendLine($"  verify_ssl: {profile.Settings.VerifySSL.ToString().ToLower()}");
            sb.AppendLine("  custom_repo:");
            sb.AppendLine($"  overlay_artwork_filetype: {profile.Settings.OverlayArtworkFiletype}");
            sb.AppendLine($"  overlay_artwork_quality: {profile.Settings.OverlayArtworkQuality}");
            sb.AppendLine();

            // Optional services
            AddOptionalServices(sb, profile);

            return sb.ToString();
        }

        private void AddOptionalServices(StringBuilder sb, KometaProfile profile)
        {
            var serverIp = ExtractIpFromUrl(profile.Plex.Url);
            
            // Webhooks
            sb.AppendLine("webhooks:");
            sb.AppendLine("  changes:");
            sb.AppendLine("  delete:");
            sb.AppendLine("  error:");
            sb.AppendLine("  run_end:");
            sb.AppendLine("  run_start:");
            sb.AppendLine("  version:");
            sb.AppendLine();

            // Optional services with default ports
            var optionalServices = new Dictionary<string, int>
            {
                {"tautulli", 8181},
                {"radarr", 7878},
                {"sonarr", 8989},
                {"gotify", 80},
                {"ntfy", 80}
            };

            foreach (var service in optionalServices)
            {
                sb.AppendLine($"{service.Key}:");
                sb.AppendLine($"  url: http://{serverIp}:{service.Value}");
                
                if (service.Key == "tautulli")
                {
                    sb.AppendLine("  apikey:");
                }
                else if (service.Key == "radarr" || service.Key == "sonarr")
                {
                    sb.AppendLine("  token:");
                    sb.AppendLine("  add_missing: false");
                    sb.AppendLine("  add_existing: false");
                    sb.AppendLine("  upgrade_existing: false");
                    sb.AppendLine("  monitor_existing: false");
                    
                    if (service.Key == "radarr")
                    {
                        sb.AppendLine("  root_folder_path: \"S:/Movies\"");
                        sb.AppendLine("  monitor: true");
                        sb.AppendLine("  availability: announced");
                    }
                    else
                    {
                        sb.AppendLine("  root_folder_path: \"S:/TV Shows\"");
                        sb.AppendLine("  monitor: all");
                        sb.AppendLine("  language_profile: English");
                        sb.AppendLine("  series_type: standard");
                        sb.AppendLine("  season_folder: true");
                        sb.AppendLine("  cutoff_search: false");
                    }
                    
                    sb.AppendLine("  quality_profile: HD-1080p");
                    sb.AppendLine("  tag:");
                    sb.AppendLine("  search: false");
                    sb.AppendLine("  ignore_cache: false");
                }
                else
                {
                    sb.AppendLine("  token:");
                }
                
                sb.AppendLine();
            }

            // API-based services
            var apiServices = new List<string> { "github", "omdb", "mdblist", "notifiarr", "anidb", "trakt", "mal" };
            
            foreach (var service in apiServices)
            {
                sb.AppendLine($"{service}:");
                
                switch (service)
                {
                    case "github":
                        sb.AppendLine("  token:");
                        break;
                    case "omdb":
                    case "mdblist":
                        sb.AppendLine("  apikey:");
                        sb.AppendLine("  cache_expiration: 60");
                        break;
                    case "notifiarr":
                        sb.AppendLine("  apikey:");
                        break;
                    case "anidb":
                        sb.AppendLine("  username:");
                        sb.AppendLine("  password:");
                        sb.AppendLine("  cache_expiration: 60");
                        sb.AppendLine("  client:");
                        sb.AppendLine("  language: en");
                        sb.AppendLine("  version: 1");
                        break;
                    case "trakt":
                        sb.AppendLine("  client_id:");
                        sb.AppendLine("  client_secret:");
                        sb.AppendLine("  pin:");
                        sb.AppendLine("  authorization:");
                        sb.AppendLine("    access_token:");
                        sb.AppendLine("    created_at:");
                        sb.AppendLine("    expires_in:");
                        sb.AppendLine("    refresh_token:");
                        sb.AppendLine("    scope: public");
                        sb.AppendLine("    token_type:");
                        break;
                    case "mal":
                        sb.AppendLine("  client_id:");
                        sb.AppendLine("  client_secret:");
                        sb.AppendLine("  cache_expiration: 60");
                        sb.AppendLine("  localhost_url:");
                        sb.AppendLine("  authorization:");
                        sb.AppendLine("    access_token:");
                        sb.AppendLine("    expires_in:");
                        sb.AppendLine("    refresh_token:");
                        sb.AppendLine("    token_type:");
                        break;
                }
                
                sb.AppendLine();
            }
        }

        public void SaveConfigToFile(string yamlContent, string filePath)
        {
            File.WriteAllText(filePath, yamlContent, Encoding.UTF8);
        }

        private string ExtractIpFromUrl(string url)
        {
            try
            {
                var uri = new Uri(url);
                return uri.Host;
            }
            catch
            {
                return "192.168.1.12"; // Default fallback
            }
        }
    }
}